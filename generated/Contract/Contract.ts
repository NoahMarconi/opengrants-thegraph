// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogSignal extends ethereum.Event {
  get params(): LogSignal__Params {
    return new LogSignal__Params(this);
  }
}

export class LogSignal__Params {
  _event: LogSignal;

  constructor(event: LogSignal) {
    this._event = event;
  }

  get support(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get signaler(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogFundingComplete extends ethereum.Event {
  get params(): LogFundingComplete__Params {
    return new LogFundingComplete__Params(this);
  }
}

export class LogFundingComplete__Params {
  _event: LogFundingComplete;

  constructor(event: LogFundingComplete) {
    this._event = event;
  }
}

export class LogGrantCancellation extends ethereum.Event {
  get params(): LogGrantCancellation__Params {
    return new LogGrantCancellation__Params(this);
  }
}

export class LogGrantCancellation__Params {
  _event: LogGrantCancellation;

  constructor(event: LogGrantCancellation) {
    this._event = event;
  }
}

export class LogFunding extends ethereum.Event {
  get params(): LogFunding__Params {
    return new LogFunding__Params(this);
  }
}

export class LogFunding__Params {
  _event: LogFunding;

  constructor(event: LogFunding) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogRefund extends ethereum.Event {
  get params(): LogRefund__Params {
    return new LogRefund__Params(this);
  }
}

export class LogRefund__Params {
  _event: LogRefund;

  constructor(event: LogRefund) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogPayment extends ethereum.Event {
  get params(): LogPayment__Params {
    return new LogPayment__Params(this);
  }
}

export class LogPayment__Params {
  _event: LogPayment;

  constructor(event: LogPayment) {
    this._event = event;
  }

  get grantee(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogPaymentApproval extends ethereum.Event {
  get params(): LogPaymentApproval__Params {
    return new LogPaymentApproval__Params(this);
  }
}

export class LogPaymentApproval__Params {
  _event: LogPaymentApproval;

  constructor(event: LogPaymentApproval) {
    this._event = event;
  }

  get grantee(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogRefundApproval extends ethereum.Event {
  get params(): LogRefundApproval__Params {
    return new LogRefundApproval__Params(this);
  }
}

export class LogRefundApproval__Params {
  _event: LogRefundApproval;

  constructor(event: LogRefundApproval) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalRefunded(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__granteesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__donorsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  fundingExpiration(): BigInt {
    let result = super.call(
      "fundingExpiration",
      "fundingExpiration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fundingExpiration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingExpiration",
      "fundingExpiration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  grantCancelled(): boolean {
    let result = super.call("grantCancelled", "grantCancelled():(bool)", []);

    return result[0].toBoolean();
  }

  try_grantCancelled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("grantCancelled", "grantCancelled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  grantees(param0: Address): Contract__granteesResult {
    let result = super.call(
      "grantees",
      "grantees(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__granteesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_grantees(param0: Address): ethereum.CallResult<Contract__granteesResult> {
    let result = super.tryCall(
      "grantees",
      "grantees(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__granteesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  contractExpiration(): BigInt {
    let result = super.call(
      "contractExpiration",
      "contractExpiration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractExpiration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractExpiration",
      "contractExpiration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPayed(): BigInt {
    let result = super.call("totalPayed", "totalPayed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPayed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPayed", "totalPayed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donors(param0: Address): Contract__donorsResult {
    let result = super.call("donors", "donors(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Contract__donorsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_donors(param0: Address): ethereum.CallResult<Contract__donorsResult> {
    let result = super.tryCall("donors", "donors(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__donorsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  totalRefunded(): BigInt {
    let result = super.call("totalRefunded", "totalRefunded():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRefunded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRefunded",
      "totalRefunded():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  targetFunding(): BigInt {
    let result = super.call("targetFunding", "targetFunding():(uint256)", []);

    return result[0].toBigInt();
  }

  try_targetFunding(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetFunding",
      "targetFunding():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingPayments(): BigInt {
    let result = super.call(
      "pendingPayments",
      "pendingPayments():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pendingPayments(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingPayments",
      "pendingPayments():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFunding(): BigInt {
    let result = super.call("totalFunding", "totalFunding():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFunding(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFunding", "totalFunding():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isManager(toCheck: Address): boolean {
    let result = super.call("isManager", "isManager(address):(bool)", [
      ethereum.Value.fromAddress(toCheck)
    ]);

    return result[0].toBoolean();
  }

  try_isManager(toCheck: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isManager", "isManager(address):(bool)", [
      ethereum.Value.fromAddress(toCheck)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableBalance(): BigInt {
    let result = super.call(
      "availableBalance",
      "availableBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableBalance",
      "availableBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canFund(): boolean {
    let result = super.call("canFund", "canFund():(bool)", []);

    return result[0].toBoolean();
  }

  try_canFund(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canFund", "canFund():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  remainingAllocation(grantee: Address): BigInt {
    let result = super.call(
      "remainingAllocation",
      "remainingAllocation(address):(uint256)",
      [ethereum.Value.fromAddress(grantee)]
    );

    return result[0].toBigInt();
  }

  try_remainingAllocation(grantee: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingAllocation",
      "remainingAllocation(address):(uint256)",
      [ethereum.Value.fromAddress(grantee)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fund(value: BigInt): boolean {
    let result = super.call("fund", "fund(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_fund(value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("fund", "fund(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approvePayout(value: BigInt, grantee: Address): boolean {
    let result = super.call(
      "approvePayout",
      "approvePayout(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(grantee)
      ]
    );

    return result[0].toBoolean();
  }

  try_approvePayout(
    value: BigInt,
    grantee: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvePayout",
      "approvePayout(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromAddress(grantee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawRefund(donor: Address): boolean {
    let result = super.call(
      "withdrawRefund",
      "withdrawRefund(address):(bool)",
      [ethereum.Value.fromAddress(donor)]
    );

    return result[0].toBoolean();
  }

  try_withdrawRefund(donor: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawRefund",
      "withdrawRefund(address):(bool)",
      [ethereum.Value.fromAddress(donor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _grantees(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _targetFunding(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _fundingExpiration(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _contractExpiration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApprovePayoutCall extends ethereum.Call {
  get inputs(): ApprovePayoutCall__Inputs {
    return new ApprovePayoutCall__Inputs(this);
  }

  get outputs(): ApprovePayoutCall__Outputs {
    return new ApprovePayoutCall__Outputs(this);
  }
}

export class ApprovePayoutCall__Inputs {
  _call: ApprovePayoutCall;

  constructor(call: ApprovePayoutCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get grantee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApprovePayoutCall__Outputs {
  _call: ApprovePayoutCall;

  constructor(call: ApprovePayoutCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelGrantCall extends ethereum.Call {
  get inputs(): CancelGrantCall__Inputs {
    return new CancelGrantCall__Inputs(this);
  }

  get outputs(): CancelGrantCall__Outputs {
    return new CancelGrantCall__Outputs(this);
  }
}

export class CancelGrantCall__Inputs {
  _call: CancelGrantCall;

  constructor(call: CancelGrantCall) {
    this._call = call;
  }
}

export class CancelGrantCall__Outputs {
  _call: CancelGrantCall;

  constructor(call: CancelGrantCall) {
    this._call = call;
  }
}

export class ApproveRefundCall extends ethereum.Call {
  get inputs(): ApproveRefundCall__Inputs {
    return new ApproveRefundCall__Inputs(this);
  }

  get outputs(): ApproveRefundCall__Outputs {
    return new ApproveRefundCall__Outputs(this);
  }
}

export class ApproveRefundCall__Inputs {
  _call: ApproveRefundCall;

  constructor(call: ApproveRefundCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get grantee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApproveRefundCall__Outputs {
  _call: ApproveRefundCall;

  constructor(call: ApproveRefundCall) {
    this._call = call;
  }
}

export class SignalCall extends ethereum.Call {
  get inputs(): SignalCall__Inputs {
    return new SignalCall__Inputs(this);
  }

  get outputs(): SignalCall__Outputs {
    return new SignalCall__Outputs(this);
  }
}

export class SignalCall__Inputs {
  _call: SignalCall;

  constructor(call: SignalCall) {
    this._call = call;
  }

  get support(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SignalCall__Outputs {
  _call: SignalCall;

  constructor(call: SignalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawRefundCall extends ethereum.Call {
  get inputs(): WithdrawRefundCall__Inputs {
    return new WithdrawRefundCall__Inputs(this);
  }

  get outputs(): WithdrawRefundCall__Outputs {
    return new WithdrawRefundCall__Outputs(this);
  }
}

export class WithdrawRefundCall__Inputs {
  _call: WithdrawRefundCall;

  constructor(call: WithdrawRefundCall) {
    this._call = call;
  }

  get donor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawRefundCall__Outputs {
  _call: WithdrawRefundCall;

  constructor(call: WithdrawRefundCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
